
Branches:
1. master: common base for all other branchs used to build images with difference features
2. develop: for images with multilib support of 32-bit binary for Armv7a
3. develop-32: for images with 32-bit Linux system


Get ready:
1. get host Linux
   Create a new machine Ubuntu 22.04 LTS on VirtualBox 7.1.4
2. get tools
   sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libsdl1.2-dev xterm python3-subunit mesa-common-dev zstd liblz4-tool pylint
3. get vendor layer
   git clone git://git.yoctoproject.org/meta-raspberrypi
   git checkout scarthgap
4. get poky
   git clone git://git.yoctoproject.org/poky
   git checkout scarthgap 

Create custom layer
1. create an empty layer
   source sources/poky/oe-init-build-env 
   bitbake-layers create-layer ../sources/meta-autot
   bitbake-layers add-layer ../sources/meta-autot/
2. edit build/conf/local.conf
   copy build/conf/local.conf and bblayers.conf to ../sources/meta-autot/conf/templates/conf
   generate initenv.sh with below contents in ~/work/yocto/:
TEMPLATECONF=../meta-autot/conf/templates/conf source ./sources/poky/oe-init-build-env
3. add linux-autot_0.1.bb to include linux-raspberrypi_6.1.bb
   need to copy meta-raspberrypi/recipes-kernel/linux/files folder to meta-autot/recipes-kernel/linux
4. add autot-image-base.bb to inherit core-image and require core-image-base.bb

build image autot-image-base
1. cd ~/work/yocto/
2. source ./initenv.sh
   It doesn't work to just execute the shell script as it will run under a new shell environment.
3. bitbake -k autot-image-base
Notes: copy local.conf and bblayer.conf if changed to sources/autot/conf/template/conf/local.conf.sample and bblayers.conf.sample for version control
4. ./getwic.sh
   unzip the final Linux image .bz2
5. install balenaEtcher to program Linux image

Create SDK
1. bitbake autot-image-base populate_sdk
2. tmp/deploy/sdk/poky-glibc-x86_64-autot-image-base-cortexa76-autot-raspberrypi5-toolchain-0.1.sh
   default install path is /opt/poky and can be specify at the beginning
   it needs over 6G space
3. source /opt/poky/0.1/environment-setup-cortexa76-poky-linux
4. build the program as on the native machine (kernel modules, application and libraries)
5. manual fix to address the issues when cross building kernel modules on host machine
   0) enter SDK kernel headers directory
      cd /opt/poky/0.1/sysroots/cortexa76-poky-linux/lib/modules/6.1.77-v8-16k/build/
   a) include/uapi$ sudo ln -s asm-generic/ asm
   b) arch/arm64/tools$ sudo awk -f gen-cpucaps.awk cpucaps > cpucaps.h
      arch/arm64/tools$ sudo cp cpucaps.h /lib/modules/6.1.77-v8-16k/build/arch/arm64/include/asm
      or copy from build/tmp/work/<arch>-poky-linux/<linux>/<ver>/<linux>-<ver>/arch/arm64/include/generated/asm/
   c) arch/arm64/tools$ sudo awk -f gen-sysreg.awk sysreg > sysreg-defs.h
      arch/arm64/tools$ sudo cp sysreg-defs.h /lib/modules/6.1.77-v8-16k/build/arch/arm64/include/asm
      or copy from build/tmp/work/<arch>-poky-linux/<linux>/<ver>/<linux>-<ver>/arch/arm64/include/generated/asm/
   d) include$ sudo ln -s asm-generic/ asm
   e) include/uapi/asm-generic$ sudo vi bitsperlong.h
      #ifdef CONFIG_64BIT
      #define __BITS_PER_LONG 64
      #else
      #define __BITS_PER_LONG 32
      #endif
   f) scripts/basic$ sudo cp /opt/poky/0.1/sysroots/cortexa76-poky-linux/lib/modules/6.1.77-v8-16k/build/scripts/basic/fixdep ./
      The file fixdep should be from build/tmp/work/<arch>-poky-linux/<linux>/<ver>/<linux>-<ver>/scripts/basic/
   g) scripts/mod$ sudo cp /opt/poky/0.1/sysroots/cortexa76-poky-linux/lib/modules/6.1.77-v8-16k/build/scripts/mod/modpost ./
      The file modpost should be from build/tmp/work/<arch>-poky-linux/<linux>/<ver>/<linux>-<ver>/scripts/modpost/
6. The fix doesn't work on the kernel headers on the target
   -> fixdep and modpost are built on the host and couldnâ€™t run on the target.

